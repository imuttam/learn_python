# SQLite Database and Table Management

## 1. Navigate to SQLite Folder Path
cd path_to_sqlite_folder

## 2. Create a Database Called `office`
sqlite3 office.db

## 3. Create a Table Called `employee` in the Database
CREATE TABLE employee(
    id INTEGER PRIMARY KEY AUTOINCREMENT, 
    name TEXT, 
    age INTEGER, 
    salary INTEGER,
    department_id INTEGER,
    FOREIGN KEY(department_id) REFERENCES department(id)
);

## 4. Create Another Table Called `department`
CREATE TABLE department(
    id INTEGER PRIMARY KEY AUTOINCREMENT, 
    name TEXT, 
    location TEXT
);

## 5. Insert Data into the `department` Table
INSERT INTO department(name, location) VALUES ('HR', 'Delhi');
INSERT INTO department(name, location) VALUES ('Finance', 'Mumbai');
INSERT INTO department(name, location) VALUES ('Engineering', 'Bangalore');

## 6. Insert Data into the `employee` Table
INSERT INTO employee(name, age, salary, department_id) VALUES ('amit', 29, 55000, 1);
INSERT INTO employee(name, age, salary, department_id) VALUES ('sunil', 32, 62000, 2);
INSERT INTO employee(name, age, salary, department_id) VALUES ('rajeev', 34, 67000, 3);
INSERT INTO employee(name, age, salary, department_id) VALUES ('pooja', 32, 61000, 1);
INSERT INTO employee(name, age, salary, department_id) VALUES ('namita', 34, 71000, 2);

## 7. Update Data in the `employee` Table
-- Example: Update the salary of employee 'amit' to 60000
UPDATE employee SET salary = 60000 WHERE name = 'amit';

## 8. Delete Data from the `employee` Table
-- Example: Delete the record of employee 'sunil'
DELETE FROM employee WHERE name = 'sunil';

# Additional Basic SQLite Commands

## View All Records in the `employee` Table
SELECT * FROM employee;

## View Specific Columns
SELECT name, salary FROM employee;

## Count the Number of Employees
SELECT COUNT(*) FROM employee;

## Order Records by Salary
SELECT * FROM employee ORDER BY salary DESC;

## Filter Records by Condition
SELECT * FROM employee WHERE age > 30;

# SQL Join Commands

## Inner Join `employee` and `department` Tables
SELECT e.name, e.age, e.salary, d.name AS department, d.location
FROM employee e
INNER JOIN department d ON e.department_id = d.id;

## Left Join `employee` and `department` Tables
SELECT e.name, e.age, e.salary, d.name AS department, d.location
FROM employee e
LEFT JOIN department d ON e.department_id = d.id;

## Right Join `employee` and `department` Tables
-- SQLite doesn't support RIGHT JOIN, but we can simulate it using LEFT JOIN
SELECT e.name, e.age, e.salary, d.name AS department, d.location
FROM department d
LEFT JOIN employee e ON e.department_id = d.id
WHERE e.id IS NULL;

# Importing CSV Data into SQLite

## Enable Importing
.mode csv

## Import CSV into the `employee` Table
.import /path/to/yourfile.csv employee

# Additional SQLite Administrative Commands

## Show all tables in the database
.tables

## Show the schema of a table
.schema employee

## Export table data to a CSV file
.headers on
.mode csv
.output /path/to/exportfile.csv
SELECT * FROM employee;
.output stdout

## Backup database
.backup main /path/to/backupfile.db

## SQL Constraints and Indexes

# Add a NOT NULL constraint
CREATE TABLE employee (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER,
    salary INTEGER,
    department_id INTEGER,
    FOREIGN KEY(department_id) REFERENCES department(id)
);

# Create an Index
CREATE INDEX idx_employee_name ON employee(name);

# Closing the SQLite Database
.quit




INNER JOIN
Purpose: Selects records that have matching values in both tables. Syntax:
SELECT columns
FROM table1
INNER JOIN table2
ON table1.column = table2.column;

SELECT e.name, e.age, d.name AS department
FROM employee e
INNER JOIN department d ON e.department_id = d.id;

Result: Returns only the rows where there is a match in both tables.

LEFT JOIN (or LEFT OUTER JOIN)
Purpose: Returns all records from the left table, and the matched records from the right table. 
If no match, the result is NULL from the right table. Syntax:
SELECT e.name, e.age, d.name AS department
FROM employee e
LEFT JOIN department d ON e.department_id = d.id;

Result: Returns all rows from the left table (employee), and matched rows from the right table (department). 
For unmatched rows, NULL values are included for columns from the right table.

RIGHT JOIN (or RIGHT OUTER JOIN)
Purpose: Returns all records from the right table, and the matched records from the left table. 
If no match, the result is NULL from the left table. Syntax:

SELECT e.name, e.age, d.name AS department
FROM employee e
RIGHT JOIN department d ON e.department_id = d.id;
Result: Returns all rows from the right table (department), and matched rows from the left table (employee).  
For unmatched rows, NULL values are included for columns from the left table


Summary Table:
Join Type	Included Rows
INNER	Only rows with matching values in both tables
LEFT	All rows from the left table, matched rows from the right table, NULL if not matched
RIGHT	All rows from the right table, matched rows from the left table, NULL if not
